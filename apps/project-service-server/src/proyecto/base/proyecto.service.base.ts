/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Proyecto as PrismaProyecto } from "@prisma/client";

export class ProyectoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ProyectoCountArgs, "select">): Promise<number> {
    return this.prisma.proyecto.count(args);
  }

  async proyectos(
    args: Prisma.ProyectoFindManyArgs
  ): Promise<PrismaProyecto[]> {
    return this.prisma.proyecto.findMany(args);
  }
  async proyecto(
    args: Prisma.ProyectoFindUniqueArgs
  ): Promise<PrismaProyecto | null> {
    return this.prisma.proyecto.findUnique(args);
  }
  async createProyecto(
    args: Prisma.ProyectoCreateArgs
  ): Promise<PrismaProyecto> {
    return this.prisma.proyecto.create(args);
  }
  async updateProyecto(
    args: Prisma.ProyectoUpdateArgs
  ): Promise<PrismaProyecto> {
    return this.prisma.proyecto.update(args);
  }
  async deleteProyecto(
    args: Prisma.ProyectoDeleteArgs
  ): Promise<PrismaProyecto> {
    return this.prisma.proyecto.delete(args);
  }
}
