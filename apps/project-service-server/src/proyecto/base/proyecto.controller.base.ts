/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProyectoService } from "../proyecto.service";
import { ProyectoCreateInput } from "./ProyectoCreateInput";
import { Proyecto } from "./Proyecto";
import { ProyectoFindManyArgs } from "./ProyectoFindManyArgs";
import { ProyectoWhereUniqueInput } from "./ProyectoWhereUniqueInput";
import { ProyectoUpdateInput } from "./ProyectoUpdateInput";

export class ProyectoControllerBase {
  constructor(protected readonly service: ProyectoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Proyecto })
  async createProyecto(
    @common.Body() data: ProyectoCreateInput
  ): Promise<Proyecto> {
    return await this.service.createProyecto({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Proyecto] })
  @ApiNestedQuery(ProyectoFindManyArgs)
  async proyectos(@common.Req() request: Request): Promise<Proyecto[]> {
    const args = plainToClass(ProyectoFindManyArgs, request.query);
    return this.service.proyectos({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Proyecto })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async proyecto(
    @common.Param() params: ProyectoWhereUniqueInput
  ): Promise<Proyecto | null> {
    const result = await this.service.proyecto({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Proyecto })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProyecto(
    @common.Param() params: ProyectoWhereUniqueInput,
    @common.Body() data: ProyectoUpdateInput
  ): Promise<Proyecto | null> {
    try {
      return await this.service.updateProyecto({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Proyecto })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProyecto(
    @common.Param() params: ProyectoWhereUniqueInput
  ): Promise<Proyecto | null> {
    try {
      return await this.service.deleteProyecto({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
