/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Proyecto } from "./Proyecto";
import { ProyectoCountArgs } from "./ProyectoCountArgs";
import { ProyectoFindManyArgs } from "./ProyectoFindManyArgs";
import { ProyectoFindUniqueArgs } from "./ProyectoFindUniqueArgs";
import { DeleteProyectoArgs } from "./DeleteProyectoArgs";
import { ProyectoService } from "../proyecto.service";
@graphql.Resolver(() => Proyecto)
export class ProyectoResolverBase {
  constructor(protected readonly service: ProyectoService) {}

  async _proyectosMeta(
    @graphql.Args() args: ProyectoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Proyecto])
  async proyectos(
    @graphql.Args() args: ProyectoFindManyArgs
  ): Promise<Proyecto[]> {
    return this.service.proyectos(args);
  }

  @graphql.Query(() => Proyecto, { nullable: true })
  async proyecto(
    @graphql.Args() args: ProyectoFindUniqueArgs
  ): Promise<Proyecto | null> {
    const result = await this.service.proyecto(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Proyecto)
  async deleteProyecto(
    @graphql.Args() args: DeleteProyectoArgs
  ): Promise<Proyecto | null> {
    try {
      return await this.service.deleteProyecto(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
