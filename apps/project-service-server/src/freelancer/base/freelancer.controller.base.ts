/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FreelancerService } from "../freelancer.service";
import { FreelancerCreateInput } from "./FreelancerCreateInput";
import { Freelancer } from "./Freelancer";
import { FreelancerFindManyArgs } from "./FreelancerFindManyArgs";
import { FreelancerWhereUniqueInput } from "./FreelancerWhereUniqueInput";
import { FreelancerUpdateInput } from "./FreelancerUpdateInput";

export class FreelancerControllerBase {
  constructor(protected readonly service: FreelancerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Freelancer })
  async createFreelancer(
    @common.Body() data: FreelancerCreateInput
  ): Promise<Freelancer> {
    return await this.service.createFreelancer({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Freelancer] })
  @ApiNestedQuery(FreelancerFindManyArgs)
  async freelancers(@common.Req() request: Request): Promise<Freelancer[]> {
    const args = plainToClass(FreelancerFindManyArgs, request.query);
    return this.service.freelancers({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Freelancer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async freelancer(
    @common.Param() params: FreelancerWhereUniqueInput
  ): Promise<Freelancer | null> {
    const result = await this.service.freelancer({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Freelancer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFreelancer(
    @common.Param() params: FreelancerWhereUniqueInput,
    @common.Body() data: FreelancerUpdateInput
  ): Promise<Freelancer | null> {
    try {
      return await this.service.updateFreelancer({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Freelancer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFreelancer(
    @common.Param() params: FreelancerWhereUniqueInput
  ): Promise<Freelancer | null> {
    try {
      return await this.service.deleteFreelancer({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
